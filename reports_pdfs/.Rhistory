install.packages("ggplot2"
)
install.packages(rmongo)
install.packages('rmongo')
install.packages('mongolite')
library(ggplot2)
library(dplyr)
library(maps)
library(ggmap)
library(mongolite)
library(lubridate)
install.packages("plyr")
library(ggplot2)
library(dplyr)
library(maps)
library(ggmap)
library(mongolite)
library(lubridate)
library(gridExtra)
crimes=data.table::fread("Crimes_2001_to_present.csv")
names(crimes)
install.packages("lubridate")
library(ggplot2)
library(dplyr)
library(maps)
library(ggmap)
library(mongolite)
library(lubridate)
library(gridExtra)
crimes=data.table::fread("Crimes_2001_to_present.csv")
names(crimes)
library(ggplot2)
library(dplyr)
library(maps)
library(ggmap)
library(mongolite)
library(lubridate)
library(gridExtra)
crimes=data.table::fread("Crimes_2001_to_present.csv")
install.packages("ggmap")
library("ggmap")
map1 <- get_map("India")
map1 <- get_map("Arlanta")
library(tidyverse0
library(tidyverse)
library(tidyverse)
install.packages(c("tidyverse", "dplyr", "readxl"))
library("tidyverse")
library("dplyr")
map1 <- get_map("Arlanta")
library("ggmap")
library("tidyverse")
library("dplyr")
map1 <- get_map("Arlanta")
register_google(key = API_KEY)
API_KEY <- AIzaSyB7EakI3km9-uoGqpa1y4cW_Wyohr2HQQQ
register_google(key = API_KEY)
API_KEY <- AIzaSyB7EakI3km9-uoGqpa1y4cW_Wyohr2HQQQ
API_KEY <- "AIzaSyB7EakI3km9-uoGqpa1y4cW_Wyohr2HQQQ"
register_google(key = API_KEY)
map1 <- get_map("Arlanta")
map1 <- get_map("INDIA",zoom = 10)
get_map(location=c(-88.68,42.14), zoom=10, scale=2)
get_map(location=c(-88.68,42.14), zoom=10, scale=2)
map1 <- get_map("INDIA",zoom = 10)
get_map(location=c(-88.68,42.14), zoom=10, scale=2)
get_map(location=c(-88.68,42.14), zoom=10, scale=2)
library("ggmap")
API_KEY <- "AIzaSyB7EakI3km9-uoGqpa1y4cW_Wyohr2HQQQ"
register_google(key = API_KEY)
get_map(location=c(-88.68,42.14), zoom=10, scale=2)
get_map(location=c(-88.68,42.14), zoom=10, scale=2)
map1 <- get_map("INDIA",zoom = 10)
map <- list()
map
source = "google"
map$base <- get_map("New York City", source=source)
map$roadmap <- get_map("New York City",maptype='roadmap', source=source)
map$hybird <- get_map("New York City",maptype='hybrid', source=source)
map$satellite <- get_map("New York City",maptype='satellite', source=source)
map$terrain <- get_map("New York City",maptype='terrain', source=source)
map <- get_map(location = 'India', zoom = 4)
API_KEY <- "AIzaSyB7EakI3km9-uoGqpa1y4cW_Wyohr2HQQQ"
register_google(key = API_KEY)
map1 <- get_map("India",zoom = 10)
API_KEY <- "AIzaSyB7EakI3km9-uoGqpa1y4cW_Wyohr2HQQQ"
register_google(key = API_KEY)
map1 <- get_map("India",zoom = 10)
map1 <- get_map("India",zoom = 10)
map1 <- get_map("India",zoom = 10)
map1 <- get_map("India",zoom = 10)
map1 <- get_map("India",zoom = 10)
map1 <- get_map("India",zoom = 10)
ggmap(map1)
map1 <- get_map("India",zoom = 1)
ggmap(map1)
map1
map1 <- get_map("India",zoom = 1)
roadmap <- get_map("India", maptype='roadmap', zoom = 10)
library("ggmap")
library("tidyverse")
library("dplyr")
API_KEY <- "AIzaSyB7EakI3km9-uoGqpa1y4cW_Wyohr2HQQQ"
register_google(key = API_KEY)
roadmap <- get_map("India", maptype='roadmap', zoom = 10)
map1 <- get_map("India",zoom = 1)
map1 <- get_map("India",zoom = 1)
map1 <- get_map("India",zoom = 1)
API_KEY <- "AIzaSyB7EakI3km9-uoGqpa1y4cW_Wyohr2HQQQ"
register_google(key = API_KEY)
roadmap <- get_map("India", maptype='roadmap', zoom = 10)
ggmap(map1)
ggmap(map1)
map1 <- get_map("India",zoom = 1)
map1 <- get_map("India",zoom = 1)
map1 <- get_map("India",zoom = 1)
ggmap(map1)
install.packages(map)
"MAP"
install.packages("map")
install.packages("MAP")
install.packages("maps")
library(ggplot2)
library(ggmap)
library(maps)
library(mapdata)
install.packages("mapdata")
library(mapdata)
usa <- map_data("usa")
ggplot() + geom_polygon(data = usa, aes(x=long, y = lat, group = group)) +
coord_fixed(1.3)
ggplot() +
geom_polygon(data = usa, aes(x=long, y = lat, group = group), fill = NA, color = "red") +
coord_fixed(1.3)
gg1
gg1 <- ggplot() +
geom_polygon(data = usa, aes(x=long, y = lat, group = group), fill = "violet", color = "blue") +
coord_fixed(1.3)
gg1
ggplot() +
geom_polygon(data = usa, aes(x=long, y = lat), fill = "violet", color = "blue") +
geom_point(data = labs, aes(x = long, y = lat), color = "black", size = 5) +
geom_point(data = labs, aes(x = long, y = lat), color = "yellow", size = 4) +
coord_fixed(1.3)
usa <- map_data("usa") # we already did this, but we can do it again
ggplot() + geom_polygon(data = usa, aes(x=long, y = lat, group = group)) +
coord_fixed(1.3)
ggplot() +
geom_polygon(data = usa, aes(x=long, y = lat, group = group), fill = NA, color = "red") +
coord_fixed(1.3)
gg1 <- ggplot() +
geom_polygon(data = usa, aes(x=long, y = lat, group = group), fill = "violet", color = "blue") +
coord_fixed(1.3)
gg1
labs <- data.frame(
long = c(-122.064873, -122.306417),
lat = c(36.951968, 47.644855),
names = c("SWFSC-FED", "NWFSC"),
stringsAsFactors = FALSE
)
gg1 +
geom_point(data = labs, aes(x = long, y = lat), color = "black", size = 5) +
geom_point(data = labs, aes(x = long, y = lat), color = "yellow", size = 4)
ggplot() +
geom_polygon(data = usa, aes(x=long, y = lat), fill = "violet", color = "blue") +
geom_point(data = labs, aes(x = long, y = lat), color = "black", size = 5) +
geom_point(data = labs, aes(x = long, y = lat), color = "yellow", size = 4) +
coord_fixed(1.3)
states <- map_data("state")
ggplot(data = states) +
geom_polygon(aes(x = long, y = lat, fill = region, group = group), color = "white") +
coord_fixed(1.3) +
guides(fill=FALSE)  # do this to leave off the color legend
map()
install.packages("leaflet")
library(leaflet)
library(leaflet)
library(shiny)
getwd()
dir.create(file.choose())
dir.create("~Rwd/R_shiny/App2")
dir.create("~/Rwd/R_shiny/App2")
setwd("~/Rwd/R_shiny/App2")
file.create("global.R")
file.create("server.R")
file.create("ui.R")
## load data ##
file.edit("global.R")
setwd("/Rwd")
setwd("~/Rwd")
getwd()
library(leaflet)
leaflet()
leaflet()  %>%
leaflet()  %>%
addProviderTiles(providers$OpenStreetMap)
map 1 <- leaflet()  %>%
addProviderTiles(providers$OpenStreetMap)
map1 <- leaflet()  %>%
addProviderTiles(providers$OpenStreetMap)
map1
map_lad <- map %>%
leaflet::addPolygons(
data = lads_eng,  # LAD polygon data from geojson
weight = 1,  # line thickness
opacity = 1,  # line transparency
color = "black",  # line colour
fillOpacity = ifelse(  # conditional fill opacity
test = lads_eng@data$st_areashape > 1E+09,  # if area is over this value
yes = 0.5,  # then make it half-opaque
no = 0  # otherwise make it entirely transparent
),
fillColor = "red",
label = ~lad17nm  # LAD name as a hover label
)
map_lad <- map1 %>%
leaflet::addPolygons(
data = lads_eng,  # LAD polygon data from geojson
weight = 1,  # line thickness
opacity = 1,  # line transparency
color = "black",  # line colour
fillOpacity = ifelse(  # conditional fill opacity
test = lads_eng@data$st_areashape > 1E+09,  # if area is over this value
yes = 0.5,  # then make it half-opaque
no = 0  # otherwise make it entirely transparent
),
fillColor = "red",
label = ~lad17nm  # LAD name as a hover label
)
install.packages("IRkernel")
IRkernel::installspecpec()
library(IRkernel)
IRkernel::installspec()
setwd("~/Python_projects/pdfs_Extractor/reports_pdfs")
library(rJava)
library(tabulizer)
library(tabulizerjars)
library(tidyverse)
pdf_contents <- extract_tables("Report_1600821.pdf")
pdf_content  <- pdf_contents[-1] ## drop 1 st page
pdf_content <- pdf_content[-length(pdf_content)] ## drop last page
pdf_content_df  <-  data.frame()
for (i in pdf_content) {
page_df <- i %>% data.frame
page_df <- page_df[-c(1,2),]
drops <- c("X2","X4","X6")
page_df <- page_df[ , !(names(page_df) %in% drops)]
pdf_content_df <- rbind(pdf_content_df,page_df)
}
colnames(pdf_content_df) <- c("Interface ID","Supplier", "Rejection Reason" , "Value")
rownames(pdf_content_df) <- NULL
test_df = pdf_content_df
nan_index=list()
for (i in row.names.data.frame(test_pdf)) {
for (a in test_df["Interface ID"]){
print(a)
}
}
for (i in row.names.data.frame(test_df)) {
for (a in test_df["Interface ID"]){
print(a)
}
}
print(test_df["Interface ID"][i])
print(test_df["Interface ID"][,i])
print(test_df["Interface ID"][:,i])
print(test_df["Interface ID"][i ,:])
print(test_df["Interface ID"][i,:])
test_df["Interface ID"][i])
test_df["Interface ID"][i]
test_df["Interface ID"][1]
test_df["Interface ID"][2]
test_df["Interface ID"][0]
test_df["Interface ID"][1]
